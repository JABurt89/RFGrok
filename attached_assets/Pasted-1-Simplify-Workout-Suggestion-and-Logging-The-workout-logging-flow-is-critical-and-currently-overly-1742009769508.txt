1. Simplify Workout Suggestion and Logging
The workout logging flow is critical and currently overly complex with multiple suggestions and unclear actions. Weâ€™ll streamline it to present a single suggestion with an option to edit, followed by a seamless logging experience.

1.1 Update Progression Logic
Where: shared/progression.ts
What: Modify all progression schemes to return a single ProgressionSuggestion instead of an array.
How:
For STSProgression, select the suggestion with the smallest 1RM increase.
For other schemes, adjust logic to return one clear recommendation.
Code:
typescript

Collapse

Wrap

Copy
// STSProgression
getNextSuggestion(last1RM: number, increment: number): ProgressionSuggestion {
  const suggestions: ProgressionSuggestion[] = [];
  for (let sets = this.minSets; sets <= this.maxSets; sets++) {
    for (let reps = this.minReps; reps <= this.maxReps; reps++) {
      const baseW = last1RM / ((1 + 0.025 * reps) * (1 + 0.025 * (sets - 1)));
      const roundedWeight = Number((Math.round(baseW / increment) * increment).toFixed(2));
      const calculated1RM = this.calculate1RM(Array(sets).fill({ reps, weight: roundedWeight }));
      if (calculated1RM > last1RM) {
        suggestions.push({ sets, reps, weight: roundedWeight, calculated1RM });
      }
    }
  }
  const sorted = suggestions.sort((a, b) => a.calculated1RM! - b.calculated1RM!);
  return sorted[0] || { sets: this.minSets, reps: this.minReps, weight: increment };
}

// RPTTopSetDependent (example for other schemes)
getNextSuggestion(lastWeight: number, increment: number, consecutiveFailures: number = 0): ProgressionSuggestion {
  const baseWeight = lastWeight || increment;
  let topSetWeight = consecutiveFailures >= 2 ? Math.max(increment, baseWeight * 0.9) : baseWeight;
  const setWeights = this.calculateSetWeights(topSetWeight);
  return {
    sets: this.sets,
    reps: this.minReps,
    weight: topSetWeight,
    setWeights,
    repTargets: Array(this.sets).fill({ min: this.minReps, max: this.maxReps })
  };
}