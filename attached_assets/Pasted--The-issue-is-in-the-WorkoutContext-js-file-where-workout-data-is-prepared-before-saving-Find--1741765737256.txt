// The issue is in the WorkoutContext.js file where workout data is prepared before saving
// Find the saveAndExitWorkout function in src/contexts/WorkoutContext.js

// Replace the current saveAndExitWorkout function with this fixed version:
const saveAndExitWorkout = async () => {
  try {
    setIsLoading(true);
    
    // Create a proper workout log with valid timestamps
    const workoutLog = {
      ...currentWorkout,
      date: new Date().toISOString(), // Ensure this is a proper ISO string
      exercises: currentWorkout.exercises.map(exercise => {
        // Process each set to ensure valid timestamps
        const processedSets = exercise.sets.map(set => {
          // Make sure each timestamp is a proper ISO string
          let timestamp = set.timestamp;
          
          // If timestamp exists but is not already an ISO string, convert it
          if (timestamp) {
            if (typeof timestamp === 'object' && timestamp instanceof Date) {
              timestamp = timestamp.toISOString();
            } else if (typeof timestamp === 'number') {
              // If it's a number (timestamp in milliseconds), convert to Date then ISO string
              timestamp = new Date(timestamp).toISOString();
            } else if (typeof timestamp === 'string') {
              // If it's already a string but not in ISO format, try to parse and convert
              try {
                const date = new Date(timestamp);
                if (!isNaN(date.getTime())) {
                  timestamp = date.toISOString();
                } else {
                  // If parsing fails, use current time
                  timestamp = new Date().toISOString();
                }
              } catch (e) {
                // If any error in parsing, use current time
                timestamp = new Date().toISOString();
              }
            } else {
              // If timestamp exists but is of an invalid type, use current time
              timestamp = new Date().toISOString();
            }
          } else {
            // If no timestamp exists, use current time
            timestamp = new Date().toISOString();
          }
          
          return {
            ...set,
            timestamp: timestamp
          };
        });
        
        return {
          ...exercise,
          sets: processedSets
        };
      }),
      completed: true,
      endTime: new Date().toISOString()
    };
    
    // Save the workout to the API
    const response = await api.post('/workouts', workoutLog);
    
    // Reset the current workout state
    setCurrentWorkout(null);
    toast.success('Workout saved successfully!');
    navigate('/history');
  } catch (error) {
    console.error('Error saving workout:', error);
    toast.error(`Error saving workout\n\n${error.response?.status}: ${JSON.stringify(error.response?.data)}`);
  } finally {
    setIsLoading(false);
  }
};