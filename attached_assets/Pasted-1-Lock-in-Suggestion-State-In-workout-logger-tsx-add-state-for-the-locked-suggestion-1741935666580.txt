1. **Lock in Suggestion State**  
   - In `workout-logger.tsx`, add state for the locked suggestion:
     ```tsx
     const [selectedSuggestion, setSelectedSuggestion] = useState(null);
     ```

2. **Use "Use these Weights" to Confirm, Not Recalculate**  
   - Modify the button handler to lock the current suggestion without triggering progression logic:
     ```tsx
     const handleUseWeights = () => {
       setSelectedSuggestion(suggestion); // Lock suggestion
       console.log("Weights confirmed:", suggestion);
     };
     ```

3. **Prevent Unintended State Loops**  
   - Remove any `useEffect` that subtracts from weights on suggestion changes. Ensure no automatic updates occur when `selectedSuggestion` is set.

4. **Use Locked Suggestion for Workout Start**  
   - Update the "Start Exercise" button to use `selectedSuggestion`:
     ```tsx
     const handleBeginWorkout = () => {
       if (selectedSuggestion) {
         setIsWorkoutActive(true);
         console.log("Starting workout with:", selectedSuggestion);
       }
     };
     ```

5. **Verify Progression Logic**  
   - In `shared/progression.ts`, ensure `getNextSuggestion` only reduces weight if `consecutiveFailures >= 2` (default to 0 during setup):
     ```tsx
     getNextSuggestion(lastWeight: number, increment: number, consecutiveFailures: number = 0): ProgressionSuggestion[] {
       const baseWeight = lastWeight || increment;
       let topSetWeight = consecutiveFailures >= 2 ? Math.max(increment, baseWeight * 0.9) : baseWeight;
       const setWeights = this.calculateSetWeights(topSetWeight);
       return [{
         sets: this.sets,
         reps: this.minReps,
         weight: topSetWeight,
         setWeights,
         repTargets: Array(this.sets).fill({ min: this.minReps, max: this.maxReps })
       }];
     }
     ```

6. **Deploy Latest UI Changes**  
   - Remove any radio button logic from the UI. Render the single suggestion and the two buttons ("Use these Weights" and "Start Exercise") as shown:
     ```tsx
     return (
       <div className="p-4">
         <h1 className="text-2xl mb-4">Bench Press - Setup</h1>
         {suggestion && (
           <div className="mt-4">
             <h2>Suggested Weights:</h2>
             <p>Top Set: {suggestion.weight}kg ({suggestion.reps} reps)</p>
             {suggestion.setWeights?.map((weight, idx) => (
               idx > 0 && (
                 <p key={idx}>Set {idx}: {weight}kg ({suggestion.repTargets[idx].min}-{suggestion.repTargets[idx].max} reps)</p>
               )
             ))}
           </div>
         )}
         <Button onClick={handleUseWeights} className="mt-4">Use these Weights</Button>
         <Button onClick={handleBeginWorkout} className="mt-4" disabled={!selectedSuggestion}>Start Exercise</Button>
       </div>
     );
     ```

7. **Test and Log**  
   - Add logging to verify that `consecutiveFailures` remains 0 during setup.
   - Confirm that pressing "Use these Weights" locks the displayed weights and does not trigger further reductions.