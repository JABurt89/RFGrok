1. **Modify `createWorkoutLog` in `server/storage.ts`:**  
   - Retrieve the workout day and its exercise progression schemes.  
   - For each exercise set, calculate 1RM using the appropriate scheme (STS, Double Progression, RPT) and add it to the set data.  
   - Encrypt and store the updated sets data with the new `oneRm` field.

   ```typescript
   async createWorkoutLog(insertWorkoutLog: InsertWorkoutLog): Promise<WorkoutLog> {
     console.log("[Storage] Creating workout log:", insertWorkoutLog);

     // Fetch the workout day to get progression schemes
     const [workoutDay] = await db
       .select()
       .from(workoutDays)
       .where(eq(workoutDays.id, insertWorkoutLog.workoutDayId));
     if (!workoutDay) throw new Error("Workout day not found");

     // Calculate 1RM for each exercise in sets
     const setsWith1RM = insertWorkoutLog.sets.map(setData => {
       const exerciseConfig = workoutDay.exercises.find(ex => ex.exerciseId === setData.exerciseId);
       if (!exerciseConfig) {
         console.warn(`[Storage] No exercise config found for exerciseId: ${setData.exerciseId}`);
         return setData; // Return unchanged if no config
       }

       let calculated1RM: number;
       switch (exerciseConfig.parameters.scheme) {
         case "STS":
           const stsProgression = new STSProgression();
           calculated1RM = stsProgression.calculate1RM(
             setData.sets.map(s => ({ reps: s.reps, weight: s.weight }))
           );
           break;
         // Add cases for other schemes as needed
         case "Double Progression":
           calculated1RM = setData.sets[0]?.weight * (1 + 0.025 * setData.sets[0]?.reps) || 0;
           break;
         case "RPT Top-Set":
         case "RPT Individual":
           calculated1RM = setData.sets[0]?.weight * (1 + 0.025 * setData.sets[0]?.reps) || 0;
           break;
         default:
           calculated1RM = 0;
       }
       console.log(`[Storage] Calculated 1RM for exercise ${setData.exerciseId}: ${calculated1RM}`);
       return { ...setData, oneRm: calculated1RM };
     });

     const encryptedSets = encrypt(JSON.stringify(setsWith1RM));
     const [workoutLog] = await db
       .insert(workoutLogs)
       .values({
         ...insertWorkoutLog,
         sets: encryptedSets,
       })
       .returning();

     return {
       ...workoutLog,
       sets: typeof workoutLog.sets === "string" ? JSON.parse(decrypt(workoutLog.sets)) : workoutLog.sets,
     };
   }
   ```

2. **Update `updateWorkoutLog` in `server/storage.ts`:**  
   - When sets are updated, recalculate the 1RM for each exercise as in `createWorkoutLog` before encrypting and updating the record.

   ```typescript
   async updateWorkoutLog(id: number, updates: Partial<WorkoutLog>): Promise<WorkoutLog> {
     const updateData = { ...updates };

     if (updateData.sets) {
       const [workoutLog] = await db.select().from(workoutLogs).where(eq(workoutLogs.id, id));
       if (!workoutLog) throw new Error("Workout log not found");

       const [workoutDay] = await db
         .select()
         .from(workoutDays)
         .where(eq(workoutDays.id, workoutLog.workoutDayId));
       if (!workoutDay) throw new Error("Workout day not found");

       const setsWith1RM = updateData.sets.map(setData => {
         const exerciseConfig = workoutDay.exercises.find(ex => ex.exerciseId === setData.exerciseId);
         if (!exerciseConfig) return setData;

         let calculated1RM: number;
         switch (exerciseConfig.parameters.scheme) {
           case "STS":
             const stsProgression = new STSProgression();
             calculated1RM = stsProgression.calculate1RM(
               setData.sets.map(s => ({ reps: s.reps, weight: s.weight }))
             );
             break;
           case "Double Progression":
             calculated1RM = setData.sets[0]?.weight * (1 + 0.025 * setData.sets[0]?.reps) || 0;
             break;
           case "RPT Top-Set":
           case "RPT Individual":
             calculated1RM = setData.sets[0]?.weight * (1 + 0.025 * setData.sets[0]?.reps) || 0;
             break;
           default:
             calculated1RM = 0;
         }
         return { ...setData, oneRm: calculated1RM };
       });

       updateData.sets = encrypt(JSON.stringify(setsWith1RM));
     }

     console.log("[Storage] Updating workout log:", id, "with:", updateData);

     const [updated] = await db
       .update(workoutLogs)
       .set(updateData)
       .where(eq(workoutLogs.id, id))
       .returning();

     if (!updated) throw new Error("Workout log not found");

     return {
       ...updated,
       sets: typeof updated.sets === "string" ? JSON.parse(decrypt(updated.sets)) : updated.sets,
     };
   }
   ```

3. **Simplify `getLastWorkoutLog` in `server/storage.ts`:**  
   - Remove in-memory 1RM calculation and simply retrieve the most recent log with the specified exercise.

   ```typescript
   async getLastWorkoutLog(userId: number, exerciseId: number): Promise<WorkoutLog | undefined> {
     console.log("[Storage] Getting last workout log for user:", userId, "and exercise:", exerciseId);
     const logs = await this.getUserWorkoutLogs(userId);
     console.log("[Storage] Found logs:", logs.length);

     const relevantLog = logs.find(log =>
       log.sets.some(set => set.exerciseId === exerciseId)
     );
     console.log("[Storage] Found relevant log:", relevantLog ? "yes" : "no");

     return relevantLog;
   }
   ```

4. **Verify Frontend Logging in `workout-logger.tsx`:**  
   - Ensure the frontend sends complete sets data (including `exerciseId` and performed sets) when logging a workout.

   ```typescript
   import { useMutation } from "@tanstack/react-query";
   import { apiRequest } from "@/lib/queryClient";
   import { InsertWorkoutLog } from "@shared/schema";

   export default function WorkoutLogger({ workoutDayId, exerciseId }) {
     const mutation = useMutation({
       mutationFn: async (log: InsertWorkoutLog) => {
         const res = await apiRequest("POST", "/api/workout-logs", log);
         return res.json();
       },
     });

     const handleCompleteWorkout = () => {
       const log: InsertWorkoutLog = {
         userId: /* current user ID */,
         workoutDayId,
         date: new Date().toISOString(),
         sets: [
           {
             exerciseId,
             sets: [
               { reps: 8, weight: 77.5, timestamp: new Date().toISOString() },
               { reps: 8, weight: 77.5, timestamp: new Date().toISOString() },
               { reps: 8, weight: 77.5, timestamp: new Date().toISOString() },
             ],
             extraSetReps: undefined, // Set if applicable for STS
           },
         ],
         isComplete: true,
       };
       mutation.mutate(log);
     };

     return (
       <button onClick={handleCompleteWorkout}>Complete Workout</button>
     );
   }
   ```

5. **Fix "Get Suggestion" Button in the Frontend:**  
   - Adjust the button to send the `estimated1RM` via API and update the UI with the returned suggestion.

   ```typescript
   import { useState } from "react";
   import { useMutation } from "@tanstack/react-query";
   import { apiRequest } from "@/lib/queryClient";

   function WorkoutSuggestion({ exerciseId }) {
     const [estimated1RM, setEstimated1RM] = useState<number | undefined>();
     const [suggestion, setSuggestion] = useState<ProgressionSuggestion | null>(null);

     const mutation = useMutation({
       mutationFn: async () => {
         const res = await apiRequest(
           "GET",
           `/api/workouts/suggestion?exerciseId=${exerciseId}&estimated1RM=${estimated1RM}`
         );
         return res.json();
       },
       onSuccess: (data) => setSuggestion(data),
     });

     return (
       <div>
         <input
           type="number"
           value={estimated1RM || ""}
           onChange={(e) => setEstimated1RM(parseFloat(e.target.value))}
           placeholder="Enter 1RM"
         />
         <button onClick={() => mutation.mutate()}>Get Suggestion</button>
         {suggestion && (
           <div>
             Sets: {suggestion.sets}, Reps: {suggestion.reps}, Weight: {suggestion.weight}
           </div>
         )}
       </div>
     );
   }
   ```

6. **Test and Validate:**  
   - **Database Check:** After logging a workout, query the `workout_logs` table to confirm the `sets` field includes valid `oneRm` values.  
   - **"Begin Workout" Test:** Click "Begin Workout" and verify that server logs show a non-zero `last1RM` reflecting past performance.  
   - **"Get Suggestion" Test:** Enter a 1RM (e.g., 100), click "Get Suggestion," and confirm the UI displays the updated suggestion.  
   - **Server Logs:** Optionally add logging in `getNextSuggestion` to confirm suggestion details.

7. **Handle Edge Cases:**  
   - Ensure default suggestions are returned if no workout day is found.  
   - Handle invalid exercise IDs via error handling.  
   - Verify that the encryption key (`ENCRYPTION_KEY`) is correctly set to avoid decryption failures.

8. **Final Verification:**  
   - Confirm that "Begin Workout" retrieves past logs with stored `oneRm` values for accurate STS suggestions.  
   - Ensure "Get Suggestion" reflects the entered `estimated1RM` and updates the UI accordingly.  
   - Validate that workout suggestions are robust and data consistency is maintained.

