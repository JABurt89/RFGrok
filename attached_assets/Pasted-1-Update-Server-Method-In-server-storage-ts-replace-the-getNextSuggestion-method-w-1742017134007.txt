1. **Update Server Method**  
   - In `server/storage.ts`, replace the `getNextSuggestion` method with the following code:

   ```typescript
   async getNextSuggestion(exerciseId: number, userId: number): Promise<ProgressionSuggestion> {
       console.log("[Storage] Getting next suggestion for exercise:", exerciseId, "and user:", userId);

       try {
           const exercise = await this.getExercise(exerciseId);
           if (!exercise) {
               console.log("[Storage] Exercise not found:", exerciseId);
               throw new Error("Exercise not found");
           }
           console.log("[Storage] Found exercise:", exercise);

           const workoutDay = await this.getExerciseWorkoutConfig(exerciseId, userId);
           const defaultSuggestion = {
               sets: 3,
               reps: 8,
               weight: exercise.startingWeight,
               calculated1RM: exercise.startingWeight * (1 + 0.025 * 8 * 3)
           };

           if (!workoutDay) {
               console.log("[Storage] No workout day found for exercise:", exerciseId);
               return defaultSuggestion;
           }
           console.log("[Storage] Found workout day:", workoutDay);

           const exerciseConfig = workoutDay.exercises.find(ex => ex.exerciseId === exerciseId);
           if (!exerciseConfig) {
               console.log("[Storage] No exercise config found in workout day");
               return defaultSuggestion;
           }
           console.log("[Storage] Found exercise config:", exerciseConfig);

           const lastLog = await this.getLastWorkoutLog(userId, exerciseId);
           console.log("[Storage] Last log:", lastLog);

           let progression;
           switch (exerciseConfig.parameters.scheme) {
               case "STS":
                   progression = new STSProgression(
                       exerciseConfig.parameters.minSets || 3,
                       exerciseConfig.parameters.maxSets || 5,
                       exerciseConfig.parameters.minReps || 5,
                       exerciseConfig.parameters.maxReps || 8
                   );
                   break;
               case "Double Progression":
                   progression = new DoubleProgression(
                       exerciseConfig.parameters.targetSets || 3,
                       exerciseConfig.parameters.minReps || 8,
                       exerciseConfig.parameters.maxReps || 12
                   );
                   break;
               case "RPT Top-Set":
                   progression = new RPTTopSetDependent(
                       exerciseConfig.parameters.sets || 3,
                       exerciseConfig.parameters.minReps || 6,
                       exerciseConfig.parameters.maxReps || 8
                   );
                   break;
               case "RPT Individual":
                   progression = new RPTIndividualProgression(
                       exerciseConfig.parameters.sets || 3,
                       exerciseConfig.parameters.setConfigs
                   );
                   break;
               default:
                   console.log("[Storage] Using default STS progression");
                   progression = new STSProgression();
           }

           const lastSetData = lastLog?.sets.find(s => s.exerciseId === exerciseId);
           let suggestions;
           if (exerciseConfig.parameters.scheme === "STS") {
               const last1RM = lastSetData?.oneRm ?? 0;
               console.log("[Storage] Using last 1RM for STS:", last1RM);
               suggestions = progression.getNextSuggestion(last1RM, exercise.increment);
               console.log("[Storage] Generated STS suggestions:", suggestions);
               if (!suggestions || suggestions.length === 0) {
                   return defaultSuggestion;
               }
           } else {
               const lastWeight = lastSetData?.sets[0]?.weight ?? exercise.startingWeight;
               console.log("[Storage] Using last weight:", lastWeight);
               suggestions = progression.getNextSuggestion(lastWeight, exercise.increment);
               console.log("[Storage] Generated suggestions:", suggestions);
           }

           return suggestions[0] || defaultSuggestion;
       } catch (error) {
           console.error("[Storage] Error in getNextSuggestion:", error);
           const exercise = await this.getExercise(exerciseId);
           if (exercise) {
               return {
                   sets: 3,
                   reps: 8,
                   weight: exercise.startingWeight,
                   calculated1RM: exercise.startingWeight * (1 + 0.025 * 8 * 3)
               };
           }
           throw new Error("Exercise not found and cannot generate suggestion");
       }
   }
   ```

2. **Enhance Client Error Handling**  
   - In `client/src/components/workout-logger.tsx`, update the component with the following code:

   ```tsx
   import { useState } from "react";
   import { useQuery } from "@tanstack/react-query";
   import { Button } from "@/components/ui/button";
   import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
   import { Input } from "@/components/ui/input";
   import { apiRequest } from "@/lib/queryClient";

   export default function WorkoutLogger({ exerciseId }: { exerciseId: number }) {
       const [isWorkoutActive, setIsWorkoutActive] = useState(false);
       const [editing, setEditing] = useState(false);
       const [currentSet, setCurrentSet] = useState(0);
       const [loggedReps, setLoggedReps] = useState<number[]>([]);

       const { data: suggestion, isError, error, isLoading } = useQuery({
           queryKey: ["/api/workout-suggestion", exerciseId],
           queryFn: () => apiRequest("GET", `/api/workout-suggestion?exerciseId=${exerciseId}`).then(res => res.json()),
       });

       const handleStartWorkout = () => setIsWorkoutActive(true);
       const handleEdit = () => setEditing(true);
       const logReps = (reps: number) => {
           setLoggedReps([...loggedReps, reps]);
           setCurrentSet(currentSet + 1);
       };

       if (isLoading) {
           return <p>Loading suggestion...</p>;
       }

       if (isError) {
           return <p>Error fetching suggestion: {(error as Error).message}</p>;
       }

       if (!suggestion) {
           return <p>No suggestion available for this exercise.</p>;
       }

       if (isWorkoutActive) {
           return (
               <div className="p-4">
                   <Card>
                       <CardHeader>
                           <CardTitle>Logging Set {currentSet + 1}</CardTitle>
                       </CardHeader>
                       <CardContent>
                           <p>Target: {suggestion.weight}kg x {suggestion.reps} reps</p>
                           <Input
                               type="number"
                               placeholder="Enter reps"
                               onChange={(e) => logReps(Number(e.target.value))}
                           />
                       </CardContent>
                   </Card>
               </div>
           );
       }

       return (
           <div className="p-4 max-w-md mx-auto">
               <Card className="shadow-md">
                   <CardHeader>
                       <CardTitle>Bench Press - Setup</CardTitle>
                   </CardHeader>
                   <CardContent>
                       <div className="space-y-2">
                           <p>Top Set: {suggestion.weight}kg ({suggestion.reps} reps)</p>
                           {suggestion.setWeights?.map((weight, idx) => idx > 0 && (
                               <p key={idx}>Set {idx}: {weight}kg</p>
                           ))}
                           <Button onClick={handleEdit} variant="outline">Edit</Button>
                       </div>
                   </CardContent>
                   <CardFooter>
                       <Button onClick={handleStartWorkout} className="w-full">Start Workout</Button>
                   </CardFooter>
               </Card>
           </div>
       );
   }
   ```

3. **Verify Data Setup**  
   - Ensure the exercise exists and has `startingWeight > 0`.  
     - Run:  
       ```sql
       SELECT * FROM exercises WHERE id = <exerciseId>;
       ```
   - Confirm the exercise is part of a workout day for the user.  
     - Run:  
       ```sql
       SELECT * FROM workout_days WHERE user_id = <userId> AND exercises @> '[{"exerciseId": <exerciseId>}]';
       ```

4. **Add Debug Logs**  
   - In `server/storage.ts`, insert the following logs:
     ```typescript
     console.log("[Storage] Last 1RM or Weight:", exerciseConfig.parameters.scheme === "STS" ? last1RM : lastWeight);
     console.log("[Storage] Generated Suggestions:", suggestions);
     console.log("[Storage] Returning Suggestion:", suggestions[0] || defaultSuggestion);
     ```
   - In `server/routes.ts`, log the final response:
     ```typescript
     console.log("[Route] Final Response Suggestion:", suggestion);
     ```

5. **Check Network Response**  
   - Open Developer Tools (F12) in your browser.  
   - Go to the "Network" tab and reload the page.  
   - Verify the `/api/workout-suggestion?exerciseId=<exerciseId>` request returns:
     - **200 OK** with a valid JSON object (e.g., `{ "sets": 3, "reps": 8, "weight": 20, "calculated1RM": 32 }`).
     - **500 Error** indicates a server error.
     - **401 Unauthorized** indicates an authentication issue.

6. **Final Verification**  
   - Test with a new exercise (no logs, no workout day): Expect default suggestion based on `startingWeight`.
   - Test with an existing exercise in a workout day: Expect a progression suggestion or default if no progression is possible.
   - Check server logs and network response for proper suggestion generation.

