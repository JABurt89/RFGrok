Thought for
62s
Expand for details
Here are the specifications relevant to the "Begin Workout" feature, including its interactions with other parts of the program, such as the database:

Overview
The "Begin Workout" feature enables users to initiate a workout session based on a predefined workout day. It guides users through their exercises, provides progression-based suggestions, logs performance data, and ensures seamless operation both online and offline.

User Interaction
Workout Day Selection: Users select a workout day from a list of predefined workout days associated with their profile.
Exercise Presentation: Once selected, the app displays the exercises in the order specified by the workout day, along with suggested sets, reps, and weights based on each exercise’s assigned progression scheme.
Suggestions Confirmation: Users can accept the suggested sets, reps, and weights or manually adjust them before starting.
Set Logging: As users complete each set, they input the reps and weight used, which the app logs with timestamps.
STS Extra Set: For exercises using the Stronger Than Self (STS) progression scheme, after completing all planned sets, the app prompts the user to perform an optional extra set to failure and records the reps.
Rest Timers: Rest timers automatically start when a set is completed, reset if the next set begins before the timer expires, and play a chime when the rest period ends.
Incomplete Workout Handling: If users exit the workout early, they are prompted with options to:
Save and Exit: Save the workout as incomplete.
Discard: Delete the partial data.
Resume Later: Save the current state for later continuation.
Database Interactions
WorkoutSession Creation: When a workout begins, the app creates a new WorkoutSession entry in the database with:
user_id: Identifies the user.
workout_day_id: Links to the selected workout day.
date: Set to the current date (or user-specified date).
status: Initialized as in_progress.
Workout Day Data Retrieval: The app queries the database to fetch the selected workout day’s details, including the list of exercises, their order, and assigned progression schemes.
Exercise and Historical Data Fetching: For each exercise:
Retrieve exercise details (e.g., equipment, starting weight, increment, units).
Fetch historical data (e.g., last logged 1RM for STS) to generate progression suggestions.
WorkoutLog Creation and Updates: For each exercise in the workout:
Create a WorkoutLog entry linked to the WorkoutSession with fields:
workout_session_id: Ties the log to the session.
exercise_id: Identifies the exercise.
scheme: Specifies the progression scheme.
sets: An array of completed sets (reps, weight, timestamp).
one_rm: Calculated one-rep max based on logged sets.
extra_set_reps: For STS, records reps from the extra set (if performed).
Update the WorkoutLog as the user logs each set.
Completion Status: When the workout ends:
If all exercises are fully logged, set WorkoutSession.status to completed.
If exited early and saved, set WorkoutSession.status to incomplete.
Resumption: For incomplete workouts, the app retrieves the WorkoutSession with status as in_progress or incomplete, loads existing WorkoutLog entries, and allows continuation.
Progression Schemes
Suggestion Generation:
STS: Generates combinations of sets, reps, and weights to slightly increase the 1RM, calculated from the last logged 1RM for that exercise instance, within 500ms.
Other Schemes: Calculates suggestions based on scheme-specific rules (e.g., Double Progression uses a fixed number of sets with a rep range; RPT adjusts weights and reps based on a top set).
First-Time Workouts: For new exercise instances without historical data, defaults to the exercise’s starting weight.
No Valid Suggestions: If no combination increases the 1RM (e.g., in STS), prompts the user to manually enter sets, reps, and weights.
Rest Timers
Behavior:
Auto-start when a set is marked complete, set to the duration specified in the workout day.
Reset if the next set is logged before the timer expires.
Play an audible chime when the timer completes.
Locking: Rest timer durations are fixed during the workout session.
Offline Support
Local Storage: When offline:
Stores WorkoutSession and WorkoutLog data in IndexedDB.
Uses locally cached workout day, exercise, and historical data for suggestions.
Syncing: When connectivity is restored:
Syncs local data to the PostgreSQL cloud database.
Resolves conflicts by prompting the user to choose between local and cloud data.
Technical Specifications
Database: PostgreSQL for cloud storage.
Local Storage: IndexedDB for offline functionality.
Performance: STS suggestion generation must complete in under 500ms.
Data Models:
WorkoutSession:
id
user_id
workout_day_id
date (ISO 8601)
status (enum: in_progress, completed, incomplete)
WorkoutLog:
workout_session_id
exercise_id
scheme
sets [{ reps, weight, timestamp }]
one_rm
extra_set_reps (for STS)
Edge Cases
Multiple Exercise Instances: Each instance of the same exercise (e.g., with different progression schemes) is tracked separately using unique identifiers.
Unit Consistency: Weights are displayed and logged in the units set per exercise, with conversions handled if needed (though unit changes are rare per the PRD).
Resuming Workouts: Loads incomplete WorkoutSession data and continues logging from the last point.
Integration with Other Program Parts
User Profile: Accessed to retrieve the list of workout days but does not affect progression calculations directly.
Workout Day Template: Provides the structure (exercises, order, schemes) for the session.
Historical Data: Used to inform progression suggestions and calculate 1RM updates.
Syncing Mechanism: Ensures data consistency across devices by syncing WorkoutSession and WorkoutLog entries when the user logs in elsewhere.
This specification ensures the "Begin Workout" feature is fully functional, user-friendly, and robustly integrated with the database and offline capabilities.