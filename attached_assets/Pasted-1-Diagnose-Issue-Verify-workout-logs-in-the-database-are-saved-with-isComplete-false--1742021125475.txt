1. **Diagnose Issue**
   - Verify workout logs in the database are saved with `isComplete = false`:
     ```sql
     SELECT * FROM workout_logs WHERE user_id = <your_user_id>;
     ```
   - In `storage.ts`, add logging in `getUserWorkoutLogs`:
     ```typescript
     console.log("[Storage] Raw logs before parsing:", logs);
     ```
   - Confirm that `getUserWorkoutLogs` returns an empty array due to `isComplete = false`.

2. **Update Client-Side Logic**
   - In `workout-logger.tsx`, add a “Finish Workout” button.
   - Implement the finish function:
     ```typescript
     import { apiRequest } from "@/lib/queryClient";
     
     const finishWorkout = async (workoutLogId: number) => {
       try {
         await apiRequest("PATCH", `/api/workout-logs/${workoutLogId}`, { isComplete: true });
         console.log("Workout marked as complete");
       } catch (error) {
         console.error("Failed to complete workout:", error);
       }
     };
     
     // Example button in the component
     <Button onClick={() => finishWorkout(currentWorkoutLogId)}>Finish Workout</Button>
     ```
   - Ensure `currentWorkoutLogId` is tracked after creating the log.

3. **Add Server-Side Support**
   - In `routes.ts`, add a PATCH endpoint to update workout logs:
     ```typescript
     authRoutes.patch("/api/workout-logs/:id", async (req, res) => {
       try {
         const id = parseInt(req.params.id);
         const { isComplete } = req.body;
         const updatedLog = await storage.updateWorkoutLog(id, { isComplete });
         res.json(updatedLog);
       } catch (error) {
         console.error("[PATCH /api/workout-logs] Error:", error);
         res.status(500).json({ error: "Failed to update workout log" });
       }
     });
     ```
   - Confirm that `storage.updateWorkoutLog` supports partial updates.

4. **Optional Alternative: Auto-Complete on Save**
   - Modify the POST handler or `createWorkoutLog` in `storage.ts` to default `isComplete` to `true`:
     ```typescript
     const [workoutLog] = await db.insert(workoutLogs)
       .values({
         ...insertWorkoutLog,
         sets: encryptedSets,
         isComplete: insertWorkoutLog.isComplete ?? true // Default to true
       })
       .returning();
     ```