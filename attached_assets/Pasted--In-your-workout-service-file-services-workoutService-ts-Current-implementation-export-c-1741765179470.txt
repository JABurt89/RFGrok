// In your workout service file (services/workoutService.ts)

// Current implementation:
export const saveWorkout = async (workoutData: WorkoutLog): Promise<WorkoutLog> => {
  try {
    const response = await fetch(`${API_URL}/workouts`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${getToken()}`,
      },
      body: JSON.stringify(workoutData),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`${response.status}: ${JSON.stringify(errorData)}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error saving workout:', error);
    throw error;
  }
};

// Fixed implementation:
export const saveWorkout = async (workoutData: WorkoutLog): Promise<WorkoutLog> => {
  try {
    // Create a copy of the workout data to modify
    const formattedWorkoutData = { ...workoutData };
    
    // Convert the date string to a Date object if it's a string
    if (typeof formattedWorkoutData.date === 'string') {
      // Parse the ISO string to a Date object
      formattedWorkoutData.date = new Date(formattedWorkoutData.date);
    }
    
    // Also check if sets have timestamp as strings and convert them
    if (formattedWorkoutData.sets && Array.isArray(formattedWorkoutData.sets)) {
      formattedWorkoutData.sets = formattedWorkoutData.sets.map(set => ({
        ...set,
        timestamp: typeof set.timestamp === 'string' ? new Date(set.timestamp) : set.timestamp
      }));
    }

    const response = await fetch(`${API_URL}/workouts`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${getToken()}`,
      },
      body: JSON.stringify(formattedWorkoutData),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`${response.status}: ${JSON.stringify(errorData)}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error saving workout:', error);
    throw error;
  }
};