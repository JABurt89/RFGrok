### Actionable Instructions to Fix RPT Top-Set Backoff Set Display

#### Step 1: Update `shared/progression.ts`
Modify the `RPTTopSetDependent` class to return suggestions for all sets, including backoff sets.

```typescript
// shared/progression.ts
export class RPTTopSetDependent implements ProgressionScheme {
  private sets: number;
  private minReps: number;
  private maxReps: number;
  private dropPercentages: number[];

  constructor(sets: number = 3, minReps: number = 6, maxReps: number = 8, dropPercentages: number[] = [0, 10, 10]) {
    this.sets = sets;
    this.minReps = minReps;
    this.maxReps = maxReps;
    this.dropPercentages = dropPercentages;
  }

  getNextSuggestion(lastWeight: number, increment: number, consecutiveFailures: number = 0): ProgressionSuggestion[] {
    const baseWeight = lastWeight || increment;
    const topSetWeight = consecutiveFailures >= 2 ? Math.max(increment, baseWeight * 0.9) : baseWeight;

    const suggestions: ProgressionSuggestion[] = [];
    for (let i = 0; i < this.sets; i++) {
      const weight = topSetWeight * (1 - (this.dropPercentages[i] || 0) / 100);
      suggestions.push({
        sets: 1, // One suggestion per set
        reps: this.minReps,
        weight,
        calculated1RM: weight * (1 + 0.025 * this.minReps)
      });
    }
    return suggestions;
  }
}
```

#### Step 2: Update `server/storage.ts`
Adjust `getNextSuggestion` to handle RPT Top-Set correctly.

```typescript
// server/storage.ts
async getNextSuggestion(exerciseId: number, userId: number, estimated1RM?: number): Promise<ProgressionSuggestion | ProgressionSuggestion[]> {
  const exercise = await this.getExercise(exerciseId);
  if (!exercise) throw new Error("Exercise not found");

  const workoutDay = await this.getExerciseWorkoutConfig(exerciseId, userId);
  if (!workoutDay) {
    return {
      sets: 3,
      reps: 8,
      weight: exercise.startingWeight || 20,
      calculated1RM: (exercise.startingWeight || 20) * 1.26,
      parameters: { scheme: "STS" }
    };
  }

  const exerciseConfig = workoutDay.exercises.find(ex => ex.exerciseId === exerciseId);
  if (!exerciseConfig) {
    return {
      sets: 3,
      reps: 8,
      weight: exercise.startingWeight || 20,
      calculated1RM: (exercise.startingWeight || 20) * 1.26,
      parameters: { scheme: "STS" }
    };
  }

  const lastLog = await this.getLastWorkoutLog(userId, exerciseId);
  const lastSetData = lastLog?.sets.find(s => s.exerciseId === exerciseId);
  const lastWeight = lastSetData?.sets[0]?.weight || exercise.startingWeight || 20;

  if (exerciseConfig.parameters.scheme === "RPT Top-Set") {
    const params = exerciseConfig.parameters as RPTTopSetParameters;
    const progression = new RPTTopSetDependent(params.sets, params.minReps, params.maxReps, params.dropPercentages);
    return progression.getNextSuggestion(lastWeight, exercise.increment || 2.5);
  }

  // Existing STS and other schemes logic remains unchanged
  // ...
}
```

#### Step 3: Update `client/src/components/workout-logger.tsx`
Ensure all sets display target weight and rep selection, with correct labeling.

```typescript
// client/src/components/workout-logger.tsx
import React, { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Button, Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui";

type WorkoutLoggerProps = {
  workoutDayId: number;
};

export default function WorkoutLogger({ workoutDayId }: WorkoutLoggerProps) {
  const [currentExerciseIndex, setCurrentExerciseIndex] = useState(0);
  const [currentSetIndex, setCurrentSetIndex] = useState(0);
  const [repsCompleted, setRepsCompleted] = useState<number | null>(null);

  const { data: workoutDay } = useQuery({
    queryKey: [`/api/workout-days/${workoutDayId}`],
    queryFn: () => apiRequest("GET", `/api/workout-days/${workoutDayId}`).then(res => res.json()),
  });

  const { data: suggestions } = useQuery({
    queryKey: [`/api/suggestions/${workoutDay?.exercises[currentExerciseIndex]?.exerciseId}`],
    queryFn: () => apiRequest("GET", `/api/suggestions/${workoutDay?.exercises[currentExerciseIndex]?.exerciseId}`).then(res => res.json()),
    enabled: !!workoutDay,
  });

  const exercise = workoutDay?.exercises[currentExerciseIndex];
  const suggestion = Array.isArray(suggestions) ? suggestions[currentSetIndex] : suggestions;

  const handleRepsSubmit = () => {
    // Log reps and move to next set or exercise
    setRepsCompleted(null);
    if (currentSetIndex + 1 < (exercise?.parameters.sets || 1)) {
      setCurrentSetIndex(currentSetIndex + 1);
    } else if (currentExerciseIndex + 1 < workoutDay.exercises.length) {
      setCurrentExerciseIndex(currentExerciseIndex + 1);
      setCurrentSetIndex(0);
    }
  };

  if (!exercise || !suggestion) return <div>Loading...</div>;

  return (
    <div className="p-4">
      <h2>
        Set {currentSetIndex + 1} of {exercise.parameters.sets} for {exercise.name}
      </h2>
      <p>Target Weight: {suggestion.weight}{exercise.units}</p>
      <p>Select the number of repetitions completed for this set:</p>
      <Select onValueChange={(value) => setRepsCompleted(parseInt(value))}>
        <SelectTrigger>
          <SelectValue placeholder="Select reps" />
        </SelectTrigger>
        <SelectContent>
          {Array.from({ length: exercise.parameters.maxReps - exercise.parameters.minReps + 1 }, (_, i) => (
            <SelectItem key={i} value={String(exercise.parameters.minReps + i)}>
              {exercise.parameters.minReps + i}
            </SelectItem>
          ))}
          <SelectItem value={String(exercise.parameters.maxReps + 1)}>
            Max Range Exceeded ({exercise.parameters.maxReps + 1}+ reps)
          </SelectItem>
        </SelectContent>
      </Select>
      <Button onClick={handleRepsSubmit} disabled={repsCompleted === null}>
        Complete Set
      </Button>
      {currentSetIndex < exercise.parameters.sets - 1 && (
        <p>Rest Time: {Math.floor(exercise.parameters.restBetweenSets / 60)}:{(exercise.parameters.restBetweenSets % 60).toString().padStart(2, "0")}</p>
      )}
    </div>
  );
}
```

#### Step 4: Rebuild the Project
Run the following commands in the terminal:

```bash
# Install dependencies if needed
npm install

# Build the client
npm run build

# Start the development server
npm run dev
```

#### Step 5: Verify Changes
- Start a workout with an RPT Top-Set exercise (e.g., Bench Press).
- Confirm that all sets (top set and backoff sets) display:
  - "Set X of Y for [Exercise Name]"
  - Target weight adjusted by drop percentages
  - Rep selection options
  - Rest time between sets

These changes ensure consistent display across all sets in the RPT Top-Set progression.