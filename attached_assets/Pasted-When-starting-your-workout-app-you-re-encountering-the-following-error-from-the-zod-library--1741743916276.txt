When starting your workout app, you're encountering the following error from the `zod` library:

```
Error: A discriminator value for key `scheme` could not be extracted from all schema options
    at Object.create [as discriminatedUnion] (file:///home/runner/workspace/node_modules/zod/lib/index.mjs:3040:23)
    at <anonymous> (/home/runner/workspace/shared/schema.ts:88:17)
    ...
```

This error occurs in `shared/schema.ts` at line 88, where a `z.discriminatedUnion` is defined with `scheme` as the discriminator key. Let's resolve it step-by-step.

### Understanding the Problem

In Zod, a `discriminatedUnion` allows you to define a schema that can match one of several object types, distinguished by a specific key (here, `scheme`). For example:

```typescript
const schemaA = z.object({
  scheme: z.literal('A'),
  // other properties
});

const schemaB = z.object({
  scheme: z.literal('B'),
  // other properties
});

const unionSchema = z.discriminatedUnion('scheme', [schemaA, schemaB]);
```

Here, `scheme` must be a literal value (e.g., `'A'` or `'B'`) in each schema option, so Zod can determine which schema to apply based on the `scheme` value in the input data. The error means that at least one schema in your `discriminatedUnion` array doesn't have a `scheme` property defined as a literal, or it's missing entirely.

### Steps to Fix the Error

To resolve this, ensure that every schema in your discriminated union adheres to the requirements. Based on your app's context (likely progression schemes like STS, Double Progression, etc.), follow these steps:

1. **Locate the Code**
   - Open `shared/schema.ts` and go to line 88, where `z.discriminatedUnion('scheme', [...])` is called.
   - Identify the array of schemas passed to it (e.g., `[stsSchema, doubleProgressionSchema, ...]`).

2. **Verify Each Schema**
   - Check every schema in the array. Each must:
     - Have a top-level `scheme` property.
     - Define it using `z.literal()` with a unique value (e.g., `z.literal('STS')`).
   - Example of what they should look like:
     ```typescript
     const stsSchema = z.object({
       scheme: z.literal('STS'),
       // other STS-specific properties
     });

     const doubleProgressionSchema = z.object({
       scheme: z.literal('Double Progression'),
       // other properties
     });
     ```

3. **Common Issues to Check**
   - **Missing `scheme` Property**: Ensure every schema has `scheme` defined.
   - **Incorrect Definition**: If `scheme` is defined as `z.string()` instead of `z.literal('value')`, Zod can't extract a specific value. Fix it by using `z.literal()`.
   - **Typos**: Confirm the key is `scheme` (not `scheeme` or similar).
   - **Missing Schemas**: Verify all intended schemas (e.g., for STS, Double Progression, etc.) are in the array.

4. **Debug with Logging**
   - To pinpoint the problematic schema, add logging before the `discriminatedUnion` call:
     ```typescript
     console.log(stsSchema.shape.scheme); // Should output a ZodLiteral
     console.log(doubleProgressionSchema.shape.scheme); // Repeat for each schema
     const progressionSchema = z.discriminatedUnion('scheme', [stsSchema, doubleProgressionSchema, ...]);
     ```
   - Run the app again. If any log shows something other than a `ZodLiteral` (e.g., `ZodString` or `undefined`), that schema needs fixing.

5. **Apply the Fix**
   - Update the problematic schema(s) to include `scheme: z.literal('UniqueValue')`.
   - Ensure each `scheme` value is unique across all schemas (e.g., `'STS'`, `'Double Progression'`, etc.).

### Example Fix

If your app has four progression schemes (STS, Double Progression, RPT Top-Set Dependent, RPT Individual Progression), the code should look like this:

```typescript
import { z } from 'zod';

const stsSchema = z.object({
  scheme: z.literal('STS'),
  // STS-specific properties
});

const doubleProgressionSchema = z.object({
  scheme: z.literal('Double Progression'),
  // Double Progression-specific properties
});

const rptTopSetSchema = z.object({
  scheme: z.literal('RPT Top-Set Dependent'),
  // RPT Top-Set properties
});

const rptIndividualSchema = z.object({
  scheme: z.literal('RPT Individual Progression'),
  // RPT Individual properties
});

const progressionSchema = z.discriminatedUnion('scheme', [
  stsSchema,
  doubleProgressionSchema,
  rptTopSetSchema,
  rptIndividualSchema,
]);
```

### Final Verification

- Save the changes and restart the app (`npm start` or equivalent).
- If the error persists, double-check the array and schema definitions, or share the relevant code for further assistance.

By ensuring each schema has a unique `scheme` literal, the error will be resolved, and your app should start successfully.